
//#include "SyntaxHighlightingMisc.h"

@property( !hlms_shadowcaster )
	@property( !shadows_receive_on_ps )
		@property( !exponential_shadow_maps )
		@piece( DoShadowReceiveVS )
			@foreach( hlms_num_shadow_map_lights, n )
				@property( !hlms_shadowmap@n_is_point_light )
					outVs.posL@n = mul( float4(worldPos.xyz, 1.0f), passBuf.shadowRcv[@n].texViewProj );

					@property( !hlms_shadowmap@n_is_directional_light && hlms_no_reverse_depth )
						outVs.posL@n.z = outVs.posL@n.z * passBuf.shadowRcv[@n].shadowDepthRange.y;
					@end
					@property( hlms_no_reverse_depth && (syntax == glsl || syntax == glsles) )
						outVs.posL@n.z = (outVs.posL@n.z * 0.5) + 0.5;
					@end
				@end
			@end

			@property( hlms_pssm_splits )outVs.depth = outVs_Position.w;@end
		@end
		@else
		@piece( DoShadowReceiveVS )
			@foreach( hlms_num_shadow_map_lights, n )
				@property( !hlms_shadowmap@n_is_point_light )
					outVs.posL@n = mul( float4(worldPos.xyz, 1.0f), passBuf.shadowRcv[@n].texViewProj );

					//It's the same as (float4( worldPos.xyz, 1 ) * texViewMatrix).z
					outVs.posL@n.z = -(dot( worldPos.xyz, passBuf.shadowRcv[@n].texViewZRow.xyz ) + passBuf.shadowRcv[@n].texViewZRow.w);
					outVs.posL@n.z = (outVs.posL@n.z - passBuf.shadowRcv[@n].shadowDepthRange.x)
											* passBuf.shadowRcv[@n].shadowDepthRange.y;
				@end
			@end

			@property( hlms_pssm_splits )outVs.depth = outVs_Position.w;@end
		@end
		@end
	@else
		@property( hlms_num_shadow_map_lights && !hlms_all_point_lights )
			@piece( DoShadowReceiveVS )
				outVs.worldPos.xyz = worldPos.xyz;
				@property( hlms_pssm_splits )outVs.depth = outVs_Position.z;@end
			@end
		@end
	@end
@end
