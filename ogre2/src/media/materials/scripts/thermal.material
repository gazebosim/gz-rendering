/*
 * Copyright (C) 2019 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// GLSL shaders
vertex_program ThermalCameraVS_GLSL glsl
{
  source depth_camera_vs.glsl
  default_params
  {
    param_named_auto worldViewProj worldviewproj_matrix
  }
}

fragment_program ThermalCameraFS_GLSL glsl
{
  source thermal_camera_fs.glsl

  default_params
  {
    param_named depthTexture int 0
    param_named colorTexture int 1
  }
}

// Metal shaders
vertex_program ThermalCameraVS_Metal metal
{
  source depth_camera_vs.metal
  default_params
  {
    param_named_auto worldViewProj worldviewproj_matrix
  }
}

fragment_program ThermalCameraFS_Metal metal
{
  source thermal_camera_fs.metal
  shader_reflection_pair_hint ThermalCameraVS_Metal
}

// Unified shaders
vertex_program ThermalCameraVS unified
{
  delegate ThermalCameraVS_GLSL
  delegate ThermalCameraVS_Metal
}

fragment_program ThermalCameraFS unified
{
  delegate ThermalCameraFS_GLSL
  delegate ThermalCameraFS_Metal
}

material ThermalCamera
{
  technique
  {
    pass depth_camera_tex
    {
      vertex_program_ref ThermalCameraVS { }
      fragment_program_ref ThermalCameraFS { }
      texture_unit depthTexture
      {
        filtering none
        tex_address_mode clamp
      }
      texture_unit colorTexture
      {
        filtering none
        tex_address_mode clamp
      }
    }
  }
}

// GLSL shaders
vertex_program heat_source_vs_GLSL glsl
{
  source plain_color_vs.glsl
  num_clip_distances 1

  default_params
  {
    param_named_auto worldViewProj worldviewproj_matrix
    param_named_auto worldView worldview_matrix
    param_named ignMinClipDistance float 0.0
  }
}

fragment_program heat_source_fs_GLSL glsl
{
  source plain_color_fs.glsl

  default_params
  {
    param_named inColor float4 1 1 1 1
  }
}

// Metal shaders
vertex_program heat_source_vs_Metal metal
{
  source plain_color_vs.metal
  num_clip_distances 1

  default_params
  {
    param_named_auto worldViewProj worldviewproj_matrix
    param_named_auto worldView worldview_matrix
    param_named ignMinClipDistance float 0.0
  }
}

fragment_program heat_source_fs_Metal metal
{
  source plain_color_fs.metal
  shader_reflection_pair_hint ThermalCameraVS_Metal
}

// Unified shaders
vertex_program heat_source_vs unified
{
  delegate heat_source_vs_GLSL
  delegate heat_source_vs_Metal
}

fragment_program heat_source_fs unified
{
  delegate heat_source_fs_GLSL
  delegate heat_source_fs_Metal
}

material ThermalHeatSource
{
  // Material has one technique
  technique
  {
    // This technique has one pass
    pass
    {
      fog_override true

      vertex_program_ref heat_source_vs
      {
      }

      fragment_program_ref heat_source_fs
      {
        param_named_auto inColor custom 10
      }
    }
  }
}

// copied from gaussian_noise.material
// GLSL shaders
vertex_program HeatSignatureVS_GLSL glsl
{
  source gaussian_noise_vs.glsl
  default_params
  {
    param_named_auto worldViewProj worldviewproj_matrix
  }
}

fragment_program HeatSignatureFS_GLSL glsl
{
  source heat_signature_fs.glsl
  default_params
  {
    param_named RT int 0
  }
}

// Metal shaders
vertex_program HeatSignatureVS_Metal metal
{
  source gaussian_noise_vs.metal
  default_params
  {
    param_named_auto worldViewProj worldviewproj_matrix
  }
}

fragment_program HeatSignatureFS_Metal metal
{
  source heat_signature_fs.metal
  shader_reflection_pair_hint HeatSignatureVS_Metal
}

// Unified shaders
vertex_program HeatSignatureVS unified
{
  delegate HeatSignatureVS_GLSL
  delegate HeatSignatureVS_Metal
}

fragment_program HeatSignatureFS unified
{
  delegate HeatSignatureFS_GLSL
  delegate HeatSignatureFS_Metal
}

material ThermalHeatSignature
{
  technique
  {
    pass
    {
      fog_override true

      // using gaussian noise VS because this is a simple VS that accomplishes
      // what we need for a heat signature VS
      vertex_program_ref HeatSignatureVS { }

      fragment_program_ref HeatSignatureFS { }

      texture_unit RT
      {
        tex_coord_set 0

        // the texture for this texture unit is set programmatically
        // since the texture file location and name are specified by the user
      }
    }
  }
}
